// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  firstName           String                @map("first_name")
  lastName            String                @map("last_name")
  email               String                @unique
  phoneNumber         String?               @map("phone_number")
  birthdayDate        DateTime?             @map("birthday_date")
  dataSinceStudent    DateTime?             @map("data_since_student")
  address             String?
  avatarUrl           String?               @map("avatar_url")
  gender              Gender?
  institution         Institution?          @relation(fields: [institutionid], references: [id])
  institutionid       Int?
  group               Group?                @relation(fields: [groupId], references: [id])
  groupId             Int?
  status              StatusStudent
  type                TypeStudent
  skills              String?
  password            String?
  StudentsOnEmployees StudentsOnEmployees[]
}

enum Gender {
  male
  female
}

model Institution {
  id      Int       @id @default(autoincrement())
  name    String
  Student Student[]
}

model Group {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Student Student[]
}

enum StatusStudent {
  ACTIVE
  TRIAL
  INACTIVE
}

enum TypeStudent {
  ADULT
  CHILD
}

model Family {
  id              Int     @id @default(autoincrement())
  parentFirstName String  @map("parent_first_name")
  parentLastName  String  @map("parent_last_name")
  email           String  @unique
  phoneNumber     String? @map("phone_number")
  address         String?
  password        String?
}

model Employee {
  id Int @id @default(autoincrement())

  firstName              String                   @map("first_name")
  lastName               String                   @map("last_name")
  email                  String                   @unique
  address                String?
  password               String?
  type                   TypeEmployee
  status                 StatusEmployee           @default(ACTIVE)
  payrollType            PayrollType
  EmployeesOnPermissions EmployeesOnPermissions[]
  StudentsOnEmployees    StudentsOnEmployees[]
}

enum TypeEmployee {
  TEACHER
  STAFF
}

enum StatusEmployee {
  ACTIVE
  INACTIVE
}

enum PayrollType {
  AUTO
  PERCENTAGE
  HOURLYRATE
}

model StudentsOnEmployees {
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int

  @@id([studentId, employeeId])
}

model Permission {
  id                     Int                      @id @default(autoincrement())
  code                   String
  description            String
  EmployeesOnPermissions EmployeesOnPermissions[]
}

model EmployeesOnPermissions {
  employee     Employee   @relation(fields: [employeeId], references: [id])
  employeeId   Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@id([employeeId, permissionId])
}
