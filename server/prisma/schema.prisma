// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  email       String   @unique
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  password    String?
  phoneNumber String?  @map("phone_number")
  address     String?

  centerName String
  isActive   Boolean @default(true) @map("is_active")

  roles                   Role[]            @default([USER])
  employeeInfo            EmployeeInfo?
  permissions             PermissionsUser[]
  teacherEvents           CalendarEvent[]   @relation(name: "calendar_event_teacher")
  studentEvents           CalendarEvent[]   @relation(name: "calendar_event_student")
  familyStudentsAsParent  FamilyStudents[]  @relation("ParentRelation")
  familyStudentsAsStudent FamilyStudents[]  @relation("StudentRelation")
  studentInfo             StudentInfo?
  teacherStudentAsTeacher TeacherStudent[]  @relation("StudentRelation")
  teacherStudentAsStudent TeacherStudent[]  @relation("TeacherRelation")
  groupStudents           GroupStudents[]
  TransactionAsTeacher    Transaction[]     @relation("TransactionTeacher")
  TransactionAsStudent    Transaction[]     @relation("TransactionStudent")
  EventPayment            EventPayment[]
}

enum Role {
  USER
  ADMIN
  TEACHER
  STUDENT
  STAFF
  FAMILY
}

enum DayOfWeek {
  Sun
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
}

enum Frequency {
  Daily
  Weekly
  Monthly
  Yearly
}

enum RepeatMonthly {
  EVERY_NTH_DATE // Of month
  EVERY_NTH_DAY // Of week
}

model EmployeeInfo {
  id Int @id @default(autoincrement())

  payroll   Payroll @relation(fields: [payrollId], references: [id])
  payrollId Int     @map("payroll_id")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  @@map("EmployeeInfo")
}

model StudentInfo {
  id           Int       @id @default(autoincrement())
  birthdayDate DateTime? @map("birthday_date")
  dateRegister DateTime? @map("date_register")
  avatarUrl    String?   @map("avatar_url")
  gender       Gender?
  status       Status
  institution  String?
  type         Type
  skills       String[]
  user         User      @relation(fields: [userId], references: [id])
  userId       Int       @unique @map("user_id")
  note         String?
}

model Group {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  groupStudents GroupStudents[]
}

model GroupStudents {
  group     Group @relation(fields: [groupId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  groupId   Int   @map("group_id")
  student   User  @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  studentId Int   @map("student_id")

  @@id(fields: [groupId, studentId])
}

model TeacherStudent {
  teacher   User @relation(name: "TeacherRelation", fields: [teacherId], references: [id])
  teacherId Int
  student   User @relation(name: "StudentRelation", fields: [studentId], references: [id])
  studentId Int

  defaultLessonCategory String  @map("default_lesson_category")
  defaultLessonLength   Int     @map("default_lesson_length")
  defaultBilling        Billing @map("default_billing")
  defaultPrice          Int?    @map("default_price")

  @@id(fields: [teacherId, studentId])
}

enum Billing {
  auto
  perLesson
  perMonth
  perHour
}

model FamilyStudents {
  parent    User @relation(name: "ParentRelation", fields: [parentId], references: [id])
  parentId  Int  @map("parent_id")
  student   User @relation(name: "StudentRelation", fields: [studentId], references: [id])
  studentId Int  @map("student_id")

  @@id(fields: [parentId, studentId])
}

enum Gender {
  male
  female
}

enum Type {
  adult
  child
}

enum Status {
  active
  trial
  inactive
}

enum TransactionStatus {
  pending
  paid
  canceled
}

enum TransactionType {
  charge
  payment
}

model Payroll {
  id            Int            @id @default(autoincrement())
  payrollType   PayrollType
  payRate       Int?           @map("pay_rate")
  makeUpCredits String?        @map("make_up_credits")
  employeeInfo  EmployeeInfo[]
}

enum PayrollType {
  auto
  percentage
  hourlyRate
}

model Permission {
  id              Int               @id @default(autoincrement())
  displayName     String            @map("display_name")
  permissionsUser PermissionsUser[]
}

model PermissionsUser {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @map("user_id")
  permissions  Permission @relation(fields: [permissionId], references: [id])
  permissionId Int        @map("permossion_id")
}

model CalendarEvent {
  id                 Int            @id @default(autoincrement())
  teacher            User           @relation(name: "calendar_event_teacher", fields: [teacherId], references: [id])
  teacherId          Int            @map("teacher_id")
  student            User?          @relation(name: "calendar_event_student", fields: [studentId], references: [id])
  studentId          Int?           @map("student_id")
  date               DateTime
  duration           Int
  isPublic           Boolean?       @map("is_public")
  stateMakeUpCredit  Boolean?       @map("state_make_up_credit")
  frequency          Frequency?
  repeatOnDaily      DayOfWeek[]    @map("repeat_on_daily")
  repeatOnMonthly    RepeatMonthly? @map("repeat_on_monthly")
  repeatUntil        DateTime?      @map("repeat_until")
  everyWeek          Int?           @map("every_week")
  everyMonth         Int?           @map("every_month")
  everyYear          Int?           @map("every_year")
  publicDescription  String?
  privateDescription String?
  EventPayment       EventPayment[]
}

model Transaction {
  id           Int               @id @default(autoincrement())
  type         TransactionType
  status       TransactionStatus
  amount       Decimal           @db.Decimal(10, 3)
  currencyCode String            @map("currency_code")
  student      User              @relation(name: "TransactionStudent", fields: [studentId], references: [id])
  studentId    Int
  teacher      User              @relation(name: "TransactionTeacher", fields: [teacherId], references: [id])
  teacherId    Int
  description  String?
  timestamp    DateTime
  intentId     String?
  EventPayment EventPayment[]
}

model EventPayment {
  id            Int               @id @default(autoincrement())
  student       User              @relation(fields: [studentId], references: [id])
  studentId     Int
  event         CalendarEvent     @relation(fields: [eventId], references: [id])
  eventId       Int
  transaction   Transaction?      @relation(fields: [transactionId], references: [id])
  transactionId Int
  status        TransactionStatus
}
