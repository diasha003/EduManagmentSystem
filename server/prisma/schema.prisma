// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  email       String   @unique
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  password    String?
  phoneNumber String?  @map("phone_number")
  address     String?

  centerName String
  isActive   Boolean @default(true) @map("is_active")

  roles         Role[]            @default([USER])
  employeeInfo  EmployeeInfo?
  permissions   PermissionsUser[]
  teacherEvents CalendarEvent[]   @relation(name: "calendar_event_teacher")
  studentEvents CalendarEvent[]   @relation(name: "calendar_event_student")
}

enum Role {
  USER
  ADMIN
  TEACHER
  STUDENT
  STAFF
}

model EmployeeInfo {
  id Int @id @default(autoincrement())

  payroll   Payroll @relation(fields: [payrollId], references: [id])
  payrollId Int     @map("payroll_id")

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  @@map("EmployeeInfo")
}

enum TypeEmployee {
  teacher
  staff
}

model Payroll {
  id            Int            @id @default(autoincrement())
  payrollType   PayrollType
  payRate       Int?           @map("pay_rate")
  makeUpCredits String?        @map("make_up_credits")
  employeeInfo  EmployeeInfo[]
}

enum PayrollType {
  auto
  percentage
  hourlyRate
}

model Permission {
  id              Int               @id @default(autoincrement())
  displayName     String            @map("display_name")
  permissionsUser PermissionsUser[]
}

model PermissionsUser {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @map("user_id")
  permissions  Permission @relation(fields: [permissionId], references: [id])
  permissionId Int        @map("permossion_id")
}

model CalendarEvent {
  id                Int       @id @default(autoincrement())
  teacher           User      @relation(name: "calendar_event_teacher", fields: [teacherId], references: [id])
  teacherId         Int       @map("teacher_id")
  student           User?     @relation(name: "calendar_event_student", fields: [studentId], references: [id])
  studentId         Int?      @map("student_id")
  date              DateTime
  isPublic          Boolean?  @map("is_public")
  stateMakeUpCredit Boolean?  @map("state_make_up_credit")
  frequency         String?
  repeatOn          String[]  @map("repeat_on")
  repeatUntil       DateTime? @map("repeat_until")
  everyWeek         Int?      @map("every_week")
  everyMonth        Int?      @map("every_month")
  everyYear         Int?      @map("every_year")
}
